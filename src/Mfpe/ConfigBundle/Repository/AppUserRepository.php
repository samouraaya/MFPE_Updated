<?php

namespace Mfpe\ConfigBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Mfpe\ConfigBundle\Entity\AppUser;

/**
 * AppUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AppUserRepository extends AbstractRepository
{

    public function hasPermissionsFunctions($name, $user): bool
    {
        $qb = $this->createQueryBuilder('app_user');
        $qb->innerJoin('app_user.userRoles', 'user_roles')
            ->innerJoin('user_roles.permissions', 'permissions')
            ->where('app_user = :userId')
            ->andWhere('permissions.name = :name')
            ->setParameters(array(
                'name' => $name,
                'userId' => $user
            ));
        //->innerJoin('user_roles.permissions','permissions', 'WITH',$qb->expr()->eq('permissions.path','ALL'))
        //->where('app_user.id',':userId')
        //->andWhere('permissions.pathMethod',':method')
        //->setParameter('userId',$user)
        /* ->setParameters(array(
          'path'=>$path
          )) *///  ->setParameter('ALL',$method)
        ;
        //   dump($qb->getQuery()->getResult());die();

        return sizeof($qb->getQuery()->getResult()) > 0;
    }

    /**
     * Retourne tous les users qui n'ont pas les roles ('ROLE_CYNAPSYS')
     * Cette requête se déclenche si l'utilisateur connecté n'a pas le role 'ROLE_CYNAPSYS'
     * @return mixed
     */
    public function getAllUserFilterRoles()
    {
        return $this
            ->createQueryBuilder('app_user')
            ->leftJoin('app_user.userRoles', 'roles')
            ->where('roles.role != \'ROLE_CYNAPSYS\'')
            ->andWhere('app_user.deleted = :deleted')
            ->setParameter('deleted', false)
            ->getQuery()
            ->getResult();
    }

    /**
     * Retourne tous les users qui n'ont pas les roles ('ROLE_CYNAPSYS', 'ROLE_ADMIN', 'ROLE_SUPER_ADMIN')
     * Cette requête se déclenche si l'utilisateur connecté n'a pas le role 'ROLE_CYNAPSYS'
     * @return mixed
     */
    public function getAllUserFilterRolesAgent()
    {
        $roles = ['ROLE_CYNAPSYS', 'ROLE_ADMIN', 'ROLE_SUPER_ADMIN', 'ROLE_CITOYEN'];
        $req = $this
            ->createQueryBuilder('app_user')
            ->leftJoin('app_user.userRoles', 'roles')
            ->orderBy('app_user.updatedAt', 'DESC')
            ->where('roles.role not in  (:role)')
            ->andWhere('app_user.deleted = :deleted')
            ->andWhere('app_user.enable = :enable')
            ->setParameter('role', $roles)
            ->setParameter('deleted', false)
            ->setParameter('enable', true)
            ->getQuery()
            ->getResult();
        return $req;
    }

    /**
     * Retourne tous les users qui n'ont pas les roles ('ROLE_CYNAPSYS', 'ROLE_ADMIN', 'ROLE_SUPER_ADMIN')
     * Cette requête se déclenche si l'utilisateur connecté n'a pas le role 'ROLE_CYNAPSYS'
     * @return mixed
     */
    public function getAllUserFilterRolesAgentEnableDisable()
    {
        $roles = ['ROLE_CYNAPSYS', 'ROLE_ADMIN', 'ROLE_SUPER_ADMIN', 'ROLE_CITOYEN'];
        $req = $this
            ->createQueryBuilder('app_user')
            ->leftJoin('app_user.userRoles', 'roles')
            ->orderBy('app_user.updatedAt', 'DESC')
            ->where('roles.role not in  (:role)')
            ->setParameter('role', $roles)
            ->getQuery()
            ->getResult();
        return $req;
    }


    public function search($roleName, $username, $nomFr, $prenomFr, $prenomAr, $nomAr, $fonction, $grade, $role, $order = 'desc', $limit = 10, $page = 0)
    {
        $qb = $this
            ->createQueryBuilder('AppUser')
            ->leftJoin('AppUser.userRoles', 'roles')
            ->orderBy('AppUser.id', $order);

        if ($username) {
            $qb
                ->orwhere('AppUser.username LIKE :username')
                ->setParameter('username', "%{$username}%");
        }

        if ($nomFr) {
            $qb
                ->orwhere('AppUser.nomFr LIKE :nomFr')
                ->setParameter('nomFr', "%{$nomFr}%");
        }

        if ($prenomFr) {
            $qb
                ->orwhere('AppUser.prenomFr LIKE :prenomFr')
                ->setParameter('prenomFr', "%{$prenomFr}%");
        }

        if ($prenomAr) {
            $qb
                ->orwhere('AppUser.prenomAr LIKE :prenomAr')
                ->setParameter('prenomAr', "%{$prenomAr}%");
        }

        if ($nomAr) {
            $qb
                ->orwhere('AppUser.nomAr LIKE :nomAr')
                ->setParameter('nomAr', "%{$nomAr}%");
        }

        if ($fonction) {
            $qb
                ->andWhere('AppUser.fonction = :fonction')
                ->setParameter('fonction', "{$fonction}");
        }

        if ($grade) {
            $qb
                ->andWhere('AppUser.grade = :grade')
                ->setParameter('grade', "{$grade}");
        }

        if ($role) {

            $qb
                ->andWhere('roles.id = :role')
                ->setParameter('role', "{$role}");
        }

        if ($roleName != 'ROLE_CYNAPSYS') {
            $qb
                ->andWhere('roles.role <> \'ROLE_CYNAPSYS\'');
        }

        return $this->paginate($qb, $limit, $page);
    }

    public function findSameUsername($idUser, $username)
    {
        $qb = $this
            ->createQueryBuilder('AppUser')
            ->select('AppUser')
            ->orderBy('AppUser.id')
            ->where('AppUser.id!= :id')
            ->andWhere('AppUser.username= :username')
            ->setParameter("id", $idUser)
            ->setParameter("username", $username);
        return count($qb->getQuery()->getResult());
    }

    public function findSameMail($idUser, $email)
    {
        $qb = $this
            ->createQueryBuilder('AppUser')
            ->select('AppUser')
            ->orderBy('AppUser.id')
            ->where('AppUser.id!= :id')
            ->andWhere('AppUser.email= :email')
            ->setParameter("id", $idUser)
            ->setParameter("email", $email);
        return count($qb->getQuery()->getResult());
    }

    public function findUserCentreFormation($idCentre)
    {

        $qb = $this
            ->createQueryBuilder('AppUser')
            ->select('AppUser')
            ->leftJoin('AppUser.centreFormation', 'centre')
            ->orderBy('AppUser.id')
            ->where('AppUser.centreFormation= :id')
            ->setParameter("id", $idCentre);

        return $qb->getQuery()->getResult();
    }

    public function findUser($idUser)
    {
        $qb = $this
            ->createQueryBuilder('AppUser')
            ->select('AppUser.username, AppUser.identifiant, AppUser.nomAr, AppUser.nomFr, AppUser.prenomAr, AppUser.prenomFr, AppUser.sexe, AppUser.tel, AppUser.numCin, AppUser.numPassport, AppUser.dateNaissance,'
                . 'nat.id as nationalite_id, nat.intituleAr as nationalite_ar, nat.intituleFr as nationalite_fr,'
                . 'gouv.id as gouvernorat_id, gouv.intituleAr as gouvernorat_ar, gouv.intituleFr as gouvernorat_fr,'
                . 'deleg.id as delegation_id, deleg.intituleAr as delegation_ar, gouv.intituleFr as delegation_fr,'
                . 'nbs.id as nature_besoin_specifique_id, nbs.intituleAr as nature_besoin_specifique_ar, nbs.intituleFr as nature_besoin_specifique_fr,'
                . 'nivEt.id as niveau_etude_id, nivEt.intituleAr as niveau_etude_ar, nivEt.intituleFr as niveau_etude_fr,'
                . 'roles.role')
            ->orderBy('AppUser.id')
            ->where('AppUser.id= :id')
            ->setParameter("id", $idUser)
            ->leftJoin('AppUser.gouvernorat', 'gouv')
            ->leftJoin('AppUser.delegation', 'deleg')
            ->leftJoin('AppUser.natureBesoinSpecifique', 'nbs')
            ->leftJoin('AppUser.niveauEtude', 'nivEt')
            ->leftJoin('AppUser.nationalite', 'nat')
            ->leftJoin('AppUser.userRoles', 'roles');

        return $qb->getQuery()->getArrayResult();
    }


    public function getUsersByGouvernoratRoles($gouvernorat, $roles)
    {
        $qb = $this->createQueryBuilder('AppUser');
        $qb->innerJoin('AppUser.userRoles', 'user_roles')
            ->where('AppUser.gouvernorat = :gouvernorat')
            ->andWhere("user_roles.role IN(:roles)")
            ->setParameter('gouvernorat', $gouvernorat)
            ->setParameter('roles', $roles);

        return $qb->getQuery()->getResult();
    }
    public function getUsersByRoles($roles)
    {
        $qb = $this->createQueryBuilder('AppUser');
        $qb->innerJoin('AppUser.userRoles', 'user_roles')
            ->where("user_roles.role IN(:roles)")
            ->setParameter('roles', $roles);

        return $qb->getQuery()->getResult();
    }
    public function getUsersByUniteRegionaleRoles($uniteRegionale, $roles)
    {
        $qb = $this->createQueryBuilder('AppUser');
        $qb->innerJoin('AppUser.userRoles', 'user_roles')
            ->where('AppUser.uniteRegionale = :uniteRegionale')
            ->andWhere("user_roles.role IN(:roles)")
            ->setParameter('uniteRegionale', $uniteRegionale)
            ->setParameter('roles', $roles);

        return $qb->getQuery()->getResult();
    }
}
