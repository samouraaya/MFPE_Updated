<?php

namespace Mfpe\AttestationBundle\Repository;

/**
 * DemandeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DemandeRepository extends \Doctrine\ORM\EntityRepository
{

    public function findLastDemande()
    {
        return $this
            ->createQueryBuilder("demande")
            ->select('demande')
            ->orderBy("demande.id", "DESC")
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    public function findLastDemandeByCentreFormationYear($year, $centreFormation)
    {
        return $query = $this
            ->createQueryBuilder("Demande")
            ->select("Demande.id,Demande.codeConvocation")
            ->andWhere("Demande.codeConvocation IS NOT NULL")
            ->andWhere("substring(Demande.codeConvocation,1,4) = :year")
            ->setParameter("year", $year)
            ->leftJoin("Demande.centreFormation", "centreFormation")
            ->andWhere("centreFormation.id = :centreFormation")
            ->setParameter("centreFormation", $centreFormation)
            ->orderBy("Demande.codeConvocation", "DESC")
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }


    public function findLastDemandeDiplomedThisYearByGouvernorat($gouvernorat, $statut, $year)
    {
        $from = new \DateTime("01-01-" . $year . " 00:00:00");
        $to = new \DateTime("31-12-" . $year . " 23:59:59");
        $query = $this
            ->createQueryBuilder("Demande")
            ->select('Demande')
            ->leftJoin('Demande.uniteRegionale', 'uniteRegionale')
            ->where('uniteRegionale.gouvernorat =  :gouv')
            ->andWhere('Demande.currentStatut = :statut')
            ->andWhere('Demande.updatedAt BETWEEN :from AND :to')
            ->setParameter("gouv", $gouvernorat)
            ->setParameter("statut", $statut)
            ->setParameter('from', $from)
            ->setParameter('to', $to)
            ->orderBy("Demande.updatedAt", "DESC");
        return $query->getQuery()->getOneOrNullResult();
    }


    public function getDemandesbyRolesAndGouvernorat($data)
    {
        $qb = $this
            ->createQueryBuilder('Demande')
            ->select('Demande,gouv')
            ->orderBy("Demande.id", "DESC")
            ->leftJoin('Demande.gouvernorat', 'gouv')
            ->leftJoin('Demande.secteur', 'secteur')
            ->leftJoin('Demande.delegation', 'deleg')
            ->leftJoin('Demande.gouvernoratProjet', 'gouvProjet')
            ->leftJoin('Demande.delegationProjet', 'delegProjet')
            ->leftJoin('Demande.currentStatut', 'currentStatut')
            ->where("currentStatut.code IN (:listStatesToSee)")
            ->setParameter('listStatesToSee', $data["state_to_see"]);
        if (isset($data["gouvernorat"]) && !empty($data["gouvernorat"])) {
            $qb
                ->where('gouv.intituleFr LIKE :gouvernorat')
                ->orWhere('gouv.intituleFr LIKE :gouvernorat')
                ->setParameter("gouvernorat", "%{$data["gouvernorat"]}%");
        }
        return $qb->getQuery()->getArrayResult();

    }

    public function getDemandesbyGouvernorat($gouvernorat)
    {
        $qb = $this
            ->createQueryBuilder('Demande')
            ->select('Demande,gouv')
            ->orderBy("Demande.id", "DESC")
            ->leftJoin('Demande.gouvernorat', 'gouv')
            ->leftJoin('Demande.secteur', 'secteur')
            ->leftJoin('Demande.delegation', 'deleg')
            ->leftJoin('Demande.gouvernoratProjet', 'gouvProjet')
            ->leftJoin('Demande.delegationProjet', 'delegProjet')
            ->leftJoin('Demande.justificatifExperiences', 'justificatifExperiences');
//dump($qb->getQuery()->getArrayResult());die;
        if ($gouvernorat) {
            $qb
                ->where('gouv.intituleFr LIKE :gouvernorat')
                ->orWhere('gouv.intituleFr LIKE :gouvernorat')
                ->setParameter("gouvernorat", "%{$gouvernorat}%");

        }


        return $qb->getQuery()->getArrayResult();

    }

    public function getDemandesWithFiltre($data)
    {
        if ((isset($data['date_debut'])) && (!empty($data['date_debut']))) {
            if (strtoupper($data['date_debut']) != 'NULL') {
                $from = new \DateTime($data['date_debut'] . " 00:00:00");
            }
        }
        if ((isset($data['date_fin'])) && (!empty($data['date_fin']))) {
            if (strtoupper($data['date_fin']) != 'NULL') {
                $to = new \DateTime($data['date_fin'] . " 23:59:59");
            }
        }
        $query = $this
            ->createQueryBuilder("Demande")
            ->select('Demande,gouv,user,spec,centreF,documents,dateExams,gouvProjet,delegProjet,uniteReg,currentSta')
            ->leftJoin('Demande.uniteRegionale', 'uniteRegionale')
            ->leftJoin('uniteRegionale.gouvernorat', 'gouverUniteRegion')
            ->leftJoin('Demande.gouvernorat', 'gouv')
            ->leftJoin('Demande.delegation', 'deleg')
            ->leftJoin('Demande.gouvernoratProjet', 'gouvProjet')
            ->leftJoin('Demande.delegationProjet', 'delegProjet')
            ->leftJoin('Demande.uniteRegionale', 'uniteReg')
            ->leftJoin('Demande.currentStatut', 'currentSta')
            ->leftJoin('Demande.secteur', 'secteur')
            ->leftJoin('Demande.specialite', 'spec')
            ->leftJoin('Demande.centreFormation', 'centreF')
            ->leftJoin('Demande.documents', 'documents')
            ->leftJoin('Demande.user', 'user')
            ->leftJoin('Demande.dateExams', 'dateExams');

        if ((isset($data['date_debut']) && !(empty($data['date_debut']))) && (isset($data['date_fin']) && !(empty($data['date_fin'])))) {
            if (strtoupper($data['date_debut']) != 'NULL' && strtoupper($data['date_fin']) != 'NULL') {
                $query->Where('Demande.createdAt BETWEEN :from AND :to')
                    ->setParameter('from', $from)
                    ->setParameter('to', $to);
            }
        }
        if (isset($data["numIdentity"]) && !(empty($data['numIdentity']))) {

            if (strtoupper($data['numIdentity']) != 'NULL') {
                $query->andWhere('user.numCin LIKE :cin')
                    ->setParameter('cin', $data['numIdentity']);
                $query->orWhere('user.numPassport LIKE :passport')
                    ->setParameter('passport', $data["numIdentity"]);
            }

        }

        if (isset($data["governorate"]) && !(empty($data['governorate']))) {
            if (strtoupper($data['governorate']) != 'NULL') {
                $query->andWhere('gouverUniteRegion.code LIKE :code')
                    ->setParameter('code', $data["governorate"]);
            }

        }

        $query->orderBy("Demande.updatedAt", "DESC");
        return $query->getQuery()->getResult();
    }


    public function getAllCandidates($data)
    {

        $query1 = $this->getUsersCandidateWithoutProject($data);
        $query2 = $this->getUsersCandidateWithProject($data);
        $response = array_merge($query1, $query2);
        $response = array_unique($response, SORT_REGULAR);
        return $response;
    }

    public function getAllCandidatesP2($data)
    {

        $query1 = $this->getUsersCandidateWithoutProjectP2($data);
        $query2 = $this->getUsersCandidateWithProjectP2($data);
        $response = array_merge($query1, $query2);
        $response = array_unique($response, SORT_REGULAR);
        return $response;
    }

    //return national Condidate for the second period
    public function getAllCandidatesNationalP2($data)
    {
        $query1 = $this->getUsersCandidateWithoutProjectNational($data);
        $query2 = $this->getUsersCandidateWithProjectP2National($data);
        $response = array_merge($query1, $query2);
        $response = array_unique($response, SORT_REGULAR);
        return $response;
    }

    //return all condidate without Project first periode
    public function getUsersCandidateWithoutProject($data)
    {
        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');
        $emConfig->addCustomDatetimeFunction('MONTH', 'DoctrineExtensions\Query\Mysql\Month');
        $emConfig->addCustomDatetimeFunction('DAY', 'DoctrineExtensions\Query\Mysql\Day');
        $query = $this->createQueryBuilder('Demande')
            ->select('Demande,User');
        $query->leftJoin('Demande.user', 'User');
        //$query->leftJoin('demandes.uniteRegionale', 'uniteRegionale');
        if (isset($data["gouvernorat"]) && !empty($data["gouvernorat"])) {
            //Project false
            $query->leftJoin('Demande.gouvernorat', 'gouvernorat')
                ->andWhere('Demande.projet = 0')
                ->andWhere('gouvernorat.code = :gouvernate')
                ->setParameter('gouvernate', $data["gouvernorat"]);
            if (isset($data["delegation"]) && !empty($data["delegation"])) {
                //dd($data);
                $query->leftJoin('Demande.delegation', 'delegation');
                $query->andWhere('Demande.projet = 0')
                    ->andWhere('delegation.id = :delegation')
                    ->setParameter('delegation', $data["delegation"]);
            }
        }
        if (isset($data["secteur"]) && !empty($data["secteur"])) {
            $query->leftJoin('Demande.secteur', 'secteur')
                ->andWhere('secteur.id = :sector')
                ->setParameter('sector', $data["secteur"]);
        }
        if (isset($data["centre_formation"]) && !empty($data["centre_formation"])) {
            $query->leftJoin('Demande.centreFormation', 'centreFormation')
                ->andWhere('centreFormation.id = :centreFormation')
                ->setParameter('centreFormation', $data["centre_formation"]);
        }
        if (isset($data["annee"]) && !empty($data["annee"])) {
            $query->andWhere('YEAR(Demande.createdAt) = :annee')
                ->setParameter('annee', $data["annee"]);
        }

        if (isset($data["from"]) && !empty($data["from"]) && isset($data["to"]) && !empty($data["to"])) {
            $du = date("Y-m-d H:i:s", strtotime($data["from"]));
            $au = date("Y-m-d H:i:s", strtotime($data["to"]));

            $query->andWhere("Demande.createdAt > :du")
                ->andWhere("Demande.updatedAt < :au")
                ->setParameter('du', $du)
                ->setParameter('au', $au);
        }
        return $query->getQuery()->getResult();
    }
    //return all condidate with Project first periode
    public function getUsersCandidateWithProject($data)
    {
        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');
        $emConfig->addCustomDatetimeFunction('MONTH', 'DoctrineExtensions\Query\Mysql\Month');
        $emConfig->addCustomDatetimeFunction('DAY', 'DoctrineExtensions\Query\Mysql\Day');

        $query = $this->createQueryBuilder('Demande')
            ->select('Demande,User');
        $query->leftJoin('Demande.user', 'User');
        //$query->leftJoin('demandes.uniteRegionale', 'uniteRegionale');
        if (isset($data["gouvernorat"]) && !empty($data["gouvernorat"])) {
            //Project true
            $query->leftJoin('Demande.gouvernoratProjet', 'gouvernoratProjet')
                ->andWhere('Demande.projet = 1')
                ->andWhere('gouvernoratProjet.code = :gouvernate')
                ->setParameter('gouvernate', $data["gouvernorat"]);
            if (isset($data["delegation"]) && !empty($data["delegation"])) {
                $query->leftJoin('Demande.delegationProjet', 'delegationProjet');
                $query->andWhere('Demande.projet = 1')
                    ->andWhere('delegationProjet.id = :delegation')
                    ->setParameter('delegation', $data["delegation"]);
            }
        }
        if (isset($data["secteur"]) && !empty($data["secteur"])) {
            //dd($data["secteur"]);
            $query->leftJoin('Demande.secteur', 'secteur')
                //$query->leftJoin('MfpeReferencielBundle:RefSecteur', "secteur")
                ->andWhere('secteur.id = :sector')
                ->setParameter('sector', $data["secteur"]);
        }
        if (isset($data["centre_formation"]) && !empty($data["centre_formation"])) {
            //dd($data["secteur"]);
            $query->leftJoin('Demande.centreFormation', 'centreFormation')
                //$query->leftJoin('MfpeReferencielBundle:RefSecteur', "secteur")
                ->andWhere('centreFormation.id = :centreFormation')
                ->setParameter('centreFormation', $data["centre_formation"]);
        }
        if (isset($data["annee"]) && !empty($data["annee"])) {
            $query->andWhere('YEAR(Demande.createdAt) = :annee')
                ->setParameter('annee', $data["annee"]);
        }

        if (isset($data["from"]) && !empty($data["from"]) && isset($data["to"]) && !empty($data["to"])) {
            $du = date("Y-m-d H:i:s", strtotime($data["from"]));
            $au = date("Y-m-d H:i:s", strtotime($data["to"]));

            $query->andWhere("Demande.createdAt > :du")
                ->andWhere("Demande.updatedAt < :au")
                ->setParameter('du', $du)
                ->setParameter('au', $au);
        }
        return $query->getQuery()->getResult();
    }

    //return all condidate Without Project seconde periode
    public function getUsersCandidateWithoutProjectP2($data)
    {
        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');
        $emConfig->addCustomDatetimeFunction('MONTH', 'DoctrineExtensions\Query\Mysql\Month');
        $emConfig->addCustomDatetimeFunction('DAY', 'DoctrineExtensions\Query\Mysql\Day');
        $query = $this->createQueryBuilder('Demande')
            ->select('Demande,User');
        $query->leftJoin('Demande.user', 'User');
        //$query->leftJoin('demandes.uniteRegionale', 'uniteRegionale');
        if (isset($data["gouvernorat"]) && !empty($data["gouvernorat"])) {
            //Project false
            $query->leftJoin('Demande.gouvernorat', 'gouvernorat')
                ->andWhere('Demande.projet = 0')
                ->andWhere('gouvernorat.code = :gouvernate')
                ->setParameter('gouvernate', $data["gouvernorat"]);
            if (isset($data["delegation"]) && !empty($data["delegation"])) {
                //dd($data);
                $query->leftJoin('Demande.delegation', 'delegation');
                $query->andWhere('Demande.projet = 0')
                    ->andWhere('delegation.id = :delegation')
                    ->setParameter('delegation', $data["delegation"]);
            }
        }
        if (isset($data["secteur"]) && !empty($data["secteur"])) {
            //dd($data["secteur"]);
            $query->leftJoin('Demande.secteur', 'secteur')
                //$query->leftJoin('MfpeReferencielBundle:RefSecteur', "secteur")
                ->andWhere('secteur.id = :sector')
                ->setParameter('sector', $data["secteur"]);
        }
        if (isset($data["centre_formation"]) && !empty($data["centre_formation"])) {
            //dd($data["secteur"]);
            $query->leftJoin('Demande.centreFormation', 'centreFormation')
                //$query->leftJoin('MfpeReferencielBundle:RefSecteur', "secteur")
                ->andWhere('centreFormation.id = :centreFormation')
                ->setParameter('centreFormation', $data["centre_formation"]);
        }
        if (isset($data["annee"]) && !empty($data["annee"])) {
            $query->andWhere('YEAR(Demande.createdAt) = :annee')
                ->setParameter('annee', $data["annee"]);
        }

        if (isset($data["fromSecondary"]) && !empty($data["fromSecondary"]) && isset($data["toSecondary"]) && !empty($data["toSecondary"])) {
            $du = date("Y-m-d H:i:s", strtotime($data["fromSecondary"]));
            $au = date("Y-m-d H:i:s", strtotime($data["toSecondary"]));

            $query->andWhere("Demande.createdAt > :du")
                ->andWhere("Demande.updatedAt < :au")
                ->setParameter('du', $du)
                ->setParameter('au', $au);
        }
        return $query->getQuery()->getResult();
    }

    //return national condidate Without Project seconde periode
    public function getUsersCandidateWithoutProjectNational($data)
    {
        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');
        $emConfig->addCustomDatetimeFunction('MONTH', 'DoctrineExtensions\Query\Mysql\Month');
        $emConfig->addCustomDatetimeFunction('DAY', 'DoctrineExtensions\Query\Mysql\Day');
        $query = $this->createQueryBuilder('Demande')
            ->select('Demande,User');
        $query->leftJoin('Demande.user', 'User');
        //$query->leftJoin('demandes.uniteRegionale', 'uniteRegionale');
//        if (isset($data["gouvernorat"]) && !empty($data["gouvernorat"])) {
//            //Project false
//            $query->leftJoin('Demande.gouvernorat', 'gouvernorat')
//                ->andWhere('Demande.projet = 0')
//                ->andWhere('gouvernorat.code = :gouvernate')
//                ->setParameter('gouvernate', $data["gouvernorat"]);
//            if (isset($data["delegation"]) && !empty($data["delegation"])) {
//                //dd($data);
//                $query->leftJoin('Demande.delegation', 'delegation');
//                $query->andWhere('Demande.projet = 0')
//                    ->andWhere('delegation.id = :delegation')
//                    ->setParameter('delegation', $data["delegation"]);
//            }
//        }
        if (isset($data["secteur"]) && !empty($data["secteur"])) {
            //dd($data["secteur"]);
            $query->leftJoin('Demande.secteur', 'secteur')
                //$query->leftJoin('MfpeReferencielBundle:RefSecteur', "secteur")
                ->andWhere('secteur.id = :sector')
                ->setParameter('sector', $data["secteur"]);
        }
        if (isset($data["centre_formation"]) && !empty($data["centre_formation"])) {
            //dd($data["secteur"]);
            $query->leftJoin('Demande.centreFormation', 'centreFormation')
                //$query->leftJoin('MfpeReferencielBundle:RefSecteur', "secteur")
                ->andWhere('centreFormation.id = :centreFormation')
                ->setParameter('centreFormation', $data["centre_formation"]);
        }


        if (isset($data["fromSecondary"]) && !empty($data["fromSecondary"]) && isset($data["toSecondary"]) && !empty($data["toSecondary"])) {
            $du = date("Y-m-d H:i:s", strtotime($data["fromSecondary"]));
            $au = date("Y-m-d H:i:s", strtotime($data["toSecondary"]));

            $query->andWhere("Demande.createdAt > :du")
                ->andWhere("Demande.updatedAt < :au")
                ->setParameter('du', $du)
                ->setParameter('au', $au);
        }
        return $query->getQuery()->getResult();
    }

    //return all condidate with Project second periode
    public function getUsersCandidateWithProjectP2($data)
    {
        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');
        $emConfig->addCustomDatetimeFunction('MONTH', 'DoctrineExtensions\Query\Mysql\Month');
        $emConfig->addCustomDatetimeFunction('DAY', 'DoctrineExtensions\Query\Mysql\Day');

        $query = $this->createQueryBuilder('Demande')
            ->select('Demande,User');
        $query->leftJoin('Demande.user', 'User');
        //$query->leftJoin('demandes.uniteRegionale', 'uniteRegionale');
        if (isset($data["gouvernorat"]) && !empty($data["gouvernorat"])) {
            //Project true
            $query->leftJoin('Demande.gouvernoratProjet', 'gouvernoratProjet')
                ->andWhere('Demande.projet = 1')
                ->andWhere('gouvernoratProjet.code = :gouvernate')
                ->setParameter('gouvernate', $data["gouvernorat"]);
            if (isset($data["delegation"]) && !empty($data["delegation"])) {
                $query->leftJoin('Demande.delegationProjet', 'delegationProjet');
                $query->andWhere('Demande.projet = 1')
                    ->andWhere('delegationProjet.id = :delegation')
                    ->setParameter('delegation', $data["delegation"]);
            }
        }
        if (isset($data["secteur"]) && !empty($data["secteur"])) {
            //dd($data["secteur"]);
            $query->leftJoin('Demande.secteur', 'secteur')
                //$query->leftJoin('MfpeReferencielBundle:RefSecteur', "secteur")
                ->andWhere('secteur.id = :sector')
                ->setParameter('sector', $data["secteur"]);
        }
        if (isset($data["centre_formation"]) && !empty($data["centre_formation"])) {
            //dd($data["secteur"]);
            $query->leftJoin('Demande.centreFormation', 'centreFormation')
                //$query->leftJoin('MfpeReferencielBundle:RefSecteur', "secteur")
                ->andWhere('centreFormation.id = :centreFormation')
                ->setParameter('centreFormation', $data["centre_formation"]);
        }
        if (isset($data["annee"]) && !empty($data["annee"])) {
            $query->andWhere('YEAR(Demande.createdAt) = :annee')
                ->setParameter('annee', $data["annee"]);
        }
        if (isset($data["fromSecondary"]) && !empty($data["fromSecondary"]) && isset($data["toSecondary"]) && !empty($data["toSecondary"])) {
            $du = date("Y-m-d H:i:s", strtotime($data["fromSecondary"]));
            $au = date("Y-m-d H:i:s", strtotime($data["toSecondary"]));

            $query->andWhere("Demande.createdAt > :du")
                ->andWhere("Demande.updatedAt < :au")
                ->setParameter('du', $du)
                ->setParameter('au', $au);
        }
        return $query->getQuery()->getResult();
    }

    //return national condidate with Project second periode
    public function getUsersCandidateWithProjectP2National($data)
    {
        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');
        $emConfig->addCustomDatetimeFunction('MONTH', 'DoctrineExtensions\Query\Mysql\Month');
        $emConfig->addCustomDatetimeFunction('DAY', 'DoctrineExtensions\Query\Mysql\Day');

        $query = $this->createQueryBuilder('Demande')
            ->select('Demande,User');
        $query->leftJoin('Demande.user', 'User');
        //$query->leftJoin('demandes.uniteRegionale', 'uniteRegionale');
//        if (isset($data["gouvernorat"]) && !empty($data["gouvernorat"])) {
//            //Project true
//            $query->leftJoin('Demande.gouvernoratProjet', 'gouvernoratProjet')
//                ->andWhere('Demande.projet = 1')
//                ->andWhere('gouvernoratProjet.code = :gouvernate')
//                ->setParameter('gouvernate', $data["gouvernorat"]);
//            if (isset($data["delegation"]) && !empty($data["delegation"])) {
//                $query->leftJoin('Demande.delegationProjet', 'delegationProjet');
//                $query->andWhere('Demande.projet = 1')
//                    ->andWhere('delegationProjet.id = :delegation')
//                    ->setParameter('delegation', $data["delegation"]);
//            }
//        }
        if (isset($data["secteur"]) && !empty($data["secteur"])) {
            //dd($data["secteur"]);
            $query->leftJoin('Demande.secteur', 'secteur')
                //$query->leftJoin('MfpeReferencielBundle:RefSecteur', "secteur")
                ->andWhere('secteur.id = :sector')
                ->setParameter('sector', $data["secteur"]);
        }
        if (isset($data["centre_formation"]) && !empty($data["centre_formation"])) {
            //dd($data["secteur"]);
            $query->leftJoin('Demande.centreFormation', 'centreFormation')
                //$query->leftJoin('MfpeReferencielBundle:RefSecteur', "secteur")
                ->andWhere('centreFormation.id = :centreFormation')
                ->setParameter('centreFormation', $data["centre_formation"]);
        }
//        if (isset($data["annee"]) && !empty($data["annee"])) {
//            $query->andWhere('YEAR(Demande.createdAt) = :annee')
//                ->setParameter('annee', $data["annee"]);
//        }
        if (isset($data["fromSecondary"]) && !empty($data["fromSecondary"]) && isset($data["toSecondary"]) && !empty($data["toSecondary"])) {
            $du = date("Y-m-d H:i:s", strtotime($data["fromSecondary"]));
            $au = date("Y-m-d H:i:s", strtotime($data["toSecondary"]));

            $query->andWhere("Demande.createdAt > :du")
                ->andWhere("Demande.updatedAt < :au")
                ->setParameter('du', $du)
                ->setParameter('au', $au);
        }
        return $query->getQuery()->getResult();
    }


    public function findAttestion($data)
    {
        $query = $this->createQueryBuilder('Demande')
            ->select('Demande,User');
        $query->leftJoin('Demande.user', 'User');

        if (isset($data["numero_attestation"]) && !empty($data["numero_attestation"])) {
            $numeroAttestation = trim(($data["numero_attestation"]));
            $query->andWhere('Demande.code = :numeroAttestation')
                ->orWhere('Demande.identifiant = :numeroAttestation')
                ->setParameter('numeroAttestation', $numeroAttestation);
        }
        if (isset($data["numero_cin"]) && !empty($data["numero_cin"])) {
            $numeroCin = trim(($data["numero_cin"]));
            $query->andWhere('User.numCin = :numeroCin')
                ->setParameter('numeroCin', $numeroCin);
        }
        if (isset($data["date_naissance"]) && !empty($data["date_naissance"])) {
            $dateNaissance = trim(($data["date_naissance"]));
            $query->andWhere('User.dateNaissance = :dateNaissance')
                ->setParameter('dateNaissance', $dateNaissance);
        }
        return $query->getQuery()->getOneOrNullResult();
    }

    public function findDemandeByStatutDelais($refStatut, $delais)
    {

        $query = $this->createQueryBuilder('Demande')
            ->select('Demande,User,Center');
        $query->leftJoin('Demande.user', 'User');
        $query->leftJoin('Demande.centreFormation', 'Center');
        if (isset($refStatut) && !empty($refStatut)) {
            $query->andWhere('Demande.currentStatut = :statut')
                ->setParameter('statut', $refStatut);
        }
        if (isset($delais) && !empty($delais)) {
            $query->andWhere('DATE_DIFF(CURRENT_DATE(), Demande.updatedAt)>=:delais')
                ->setParameter('delais', $delais);
        }
        return $query->getQuery()->getResult();
    }

    public function findDemandeByStatutAndNbExamen($refStatut, $delais)
    {

        $query = $this->createQueryBuilder('Demande')
            ->select('Demande,DateExam,User,Center')->distinct();
        $query->leftJoin('Demande.dateExams', 'DateExam');
        $query->leftJoin('Demande.centreFormation', 'Center');
        $query->leftJoin('Demande.user', 'User');
        if (isset($refStatut) && !empty($refStatut)) {
            $query->andWhere('Demande.currentStatut = :statut')
                ->setParameter('statut', $refStatut);
        }
        if (isset($delais) && !empty($delais)) {
            $query->andWhere('DateExam.nbTimesNotPassExamen>=:delais')
                ->setParameter('delais', $delais);
        }

        return $query->getQuery()->getResult();
    }


}