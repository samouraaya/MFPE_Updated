<?php

namespace Mfpe\CollectDataBundle\Repository;

/**
 * StatGraduateTrainingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StatGraduateTrainingRepository extends \Doctrine\ORM\EntityRepository
{
    //get GraduateTraining Etatique first period
    public function getGraduateTrainingEtatiqueByFiltre($data, $sector)
    {
        //select
        $query = $this->createQueryBuilder('StatGraduateTraining');
        $query->select('StatGraduateTraining,trainingCenter,gouvernorat');
        $query->leftJoin('StatGraduateTraining.trainingCenter', 'trainingCenter');
        $query->leftJoin('trainingCenter.gouvernorat', 'gouvernorat');

        if (isset($data["governorate"]) && !empty($data["governorate"])) {

            $governorat = trim($data["governorate"]);
            //  $query->leftJoin('trainingCenter.gouvernorat', 'gouvernorat');
            $query
                ->orWhere('gouvernorat.id = :gouvernate')
                ->orWhere('gouvernorat.code = :gouvernat')
                ->setParameter('gouvernate', $governorat)
                ->setParameter('gouvernat', $governorat);
            //  ->orderBy('StatGraduateTraining.updatedAt', "DESC");
        }

        if (isset($data["year"]) && !empty($data["year"])) {

            $year = trim($data["year"]);
            $query
                ->andwhere('StatGraduateTraining.administrativeYear = :year')
                ->setParameter('year', $year);
        }
        if (isset($data["month"]) && !empty($data["month"])) {

            $month = trim($data["month"]);
            $query
                ->andwhere('StatGraduateTraining.month = :month')
                ->setParameter('month', $month);
        }
        if (isset($data["organization"]) && !empty($data["organization"])) {
            $organization = strtoupper($data["organization"]);
            $query
                ->andwhere('UPPER(trainingCenter.organisme)=:organisme')
                ->setParameter('organisme', $organization);
        }
        if (isset($sector) && !empty($sector)) {
            $query->andWhere("StatGraduateTraining.sectorType = :sector");
        }
        $query->setParameter('sector', $sector);
        $response = $query->getQuery()->getArrayResult();
        return $response;
    }

    //get GraduateTraining Etatique second period
    public function getGraduateTrainingEtatiqueByFiltreP2($data, $sector)
    {
        //select
        $query = $this->createQueryBuilder('StatGraduateTraining');
        $query->select('StatGraduateTraining,trainingCenter,gouvernorat');
        $query->leftJoin('StatGraduateTraining.trainingCenter', 'trainingCenter');
        $query->leftJoin('trainingCenter.gouvernorat', 'gouvernorat');

        if (isset($data["governorate"]) && !empty($data["governorate"])) {

            $governorat = trim($data["governorate"]);
            //  $query->leftJoin('trainingCenter.gouvernorat', 'gouvernorat');
            $query
                ->orWhere('gouvernorat.id = :gouvernate')
                ->orWhere('gouvernorat.code = :gouvernat')
                ->setParameter('gouvernate', $governorat)
                ->setParameter('gouvernat', $governorat);
            //  ->orderBy('StatGraduateTraining.updatedAt', "DESC");
        }


        if (isset($data["yearSecondary"]) && !empty($data["yearSecondary"])) {
            $year = trim($data["yearSecondary"]);
            $query
                ->andwhere('StatGraduateTraining.administrativeYear = :year')
                ->setParameter('year', $year);
        }
        if (isset($data["monthSecondary"]) && !empty($data["monthSecondary"])) {
            $month = trim($data["monthSecondary"]);
            $query
                ->andwhere('StatGraduateTraining.month = :month')
                ->setParameter('month', $month);
        }
        if (isset($data["organization"]) && !empty($data["organization"])) {
            $organization = strtoupper($data["organization"]);
            $query
                ->andwhere('UPPER(trainingCenter.organisme)=:organisme')
                ->setParameter('organisme', $organization);
        }
        if (isset($sector) && !empty($sector)) {
            $query->andWhere("StatGraduateTraining.sectorType = :sector");
        }
        $query->setParameter('sector', $sector);
        $response = $query->getQuery()->getArrayResult();
        return $response;


    }


    public function findAllNiveauEtudeStatGraduateTraining()
    {
        $query = $this->createQueryBuilder('StatGraduateTraining');
        $query->select('niveauDiplome.id as idNiveau');
        $query->leftJoin('StatGraduateTraining.speciality', 'speciality');
        $query->leftJoin('speciality.niveauDiplome', 'niveauDiplome');
        $response = $query->getQuery()->getResult();
        return $response;

    }


    //get Total GraduateTraining Etatique second period
    public function getTotalGraduateTrainingEtatique($data, $sector)
    {
        //select
        $query = $this->createQueryBuilder('StatGraduateTraining')
            ->select("StatGraduateTraining.id as idStatGraduateTraining,trainingCenter.id as idCenter,trainingCenter.intituleFr as intituleFrCenter,trainingCenter.intituleAr as intituleArCenter,SUM(trainingCenter.capaciteAccueil) as nationalCapaciteAccueil,SUM(trainingCenter.capaciteHebergement) as nationalCapaciteHebergement ,
        SUM(trainingCenter.capaciteRestaurant) as nationalCapaciteRestaurant,SUM(trainingCenter.nombreFormateur) as nationalNombreFormateur,SUM(trainingCenter.nombreCadreAdministratif) as nationalNombreCadreAdministratif");

        $query->leftJoin('StatGraduateTraining.trainingCenter', 'trainingCenter');
        $query->leftJoin('trainingCenter.specialiteCenters', 'specialiteCenters');
        $query->leftJoin('trainingCenter.gouvernorat', 'gouvernorat');
        $query->where("StatGraduateTraining.sectorType = :sector");
        $query->setParameter('sector', $sector);
        $query->groupBy('StatGraduateTraining.id');
//        if (isset($data["governorate"]) && !empty($data["governorate"])) {
//            $governorat = trim($data["governorate"]);
//
//            $query
//                ->andwhere('gouvernorat.id = :gouvernate')
//                ->setParameter('gouvernate', $governorat);
//
//        }
        if (isset($data["yearSecondary"]) && !empty($data["yearSecondary"])) {

            $year = trim($data["yearSecondary"]);
            $query
                ->andwhere('StatGraduateTraining.administrativeYear = :year')
                ->setParameter('year', $year);
        }
        if (isset($data["monthSecondary"]) && !empty($data["monthSecondary"])) {

            $month = trim($data["monthSecondary"]);
            $query
                ->andwhere('StatGraduateTraining.month = :month')
                ->setParameter('month', $month);
        }
        if (isset($data["organization"]) && !empty($data["organization"])) {
            $organization = strtoupper($data["organization"]);
            $query
                ->andwhere('UPPER(trainingCenter.organisme)= :organisme')
                ->setParameter('organisme', $organization);
        }
        $response = $query->getQuery()->getArrayResult();
        return $response;
    }

    //get nbre speciality center first periode
    public function getNombreSpecialityByCenter($data, $sector)
    {

        //select nombre of speciality of center
        $query = $this->createQueryBuilder('StatGraduateTraining')
            ->select("COUNT(distinct(specialiteCenters.id)) as nombreSpecialiteParCentre,trainingCenter.id ");
        $query->leftJoin('StatGraduateTraining.trainingCenter', 'trainingCenter');
        $query->leftJoin('trainingCenter.specialiteCenters', 'specialiteCenters');
        $query->leftJoin('trainingCenter.gouvernorat', 'gouvernorat');
        $query->where("StatGraduateTraining.sectorType = :sector");
        $query->setParameter('sector', $sector);
        $query->groupBy('trainingCenter');
        if (isset($data["governorate"]) && !empty($data["governorate"])) {
            $governorat = trim($data["governorate"]);

            $query
                ->orWhere('gouvernorat.id = :gouvernate')
                ->orWhere('gouvernorat.code = :gouvernat')
                ->setParameter('gouvernate', $governorat)
                ->setParameter('gouvernat', $governorat);
        }
        if (isset($data["year"]) && !empty($data["year"])) {

            $year = trim($data["year"]);
            $query
                ->andwhere('StatGraduateTraining.administrativeYear = :year')
                ->setParameter('year', $year);
        }
        if (isset($data["month"]) && !empty($data["month"])) {

            $month = trim($data["month"]);
            $query
                ->andwhere('StatGraduateTraining.month = :month')
                ->setParameter('month', $month);
        }
        if (isset($data["organization"]) && !empty($data["organization"])) {
            $organization = strtoupper($data["organization"]);
            $query
                ->andwhere('UPPER(trainingCenter.organisme)= :organisme')
                ->setParameter('organisme', $organization);
        }
        $response = $query->getQuery()->getArrayResult();
        return $response;
    }

    //get nbre speciality center seconde periode
    public function getNombreSpecialityByCenterP2($data, $sector)
    {

        //select nombre of speciality of center
        $query = $this->createQueryBuilder('StatGraduateTraining')
            ->select("COUNT(distinct(specialiteCenters.id)) as nombreSpecialiteParCentre,trainingCenter.id ");
        $query->leftJoin('StatGraduateTraining.trainingCenter', 'trainingCenter');
        $query->leftJoin('trainingCenter.specialiteCenters', 'specialiteCenters');
        $query->leftJoin('trainingCenter.gouvernorat', 'gouvernorat');
        $query->where("StatGraduateTraining.sectorType = :sector");
        $query->setParameter('sector', $sector);
        $query->groupBy('trainingCenter');
        if (isset($data["governorate"]) && !empty($data["governorate"])) {
            $governorat = trim($data["governorate"]);

            $query
                ->orWhere('gouvernorat.id = :gouvernate')
                ->orWhere('gouvernorat.code = :gouvernat')
                ->setParameter('gouvernate', $governorat)
                ->setParameter('gouvernat', $governorat);

        }
        if (isset($data["yearSecondary"]) && !empty($data["yearSecondary"])) {

            $year = trim($data["yearSecondary"]);
            $query
                ->andwhere('StatGraduateTraining.administrativeYear = :year')
                ->setParameter('year', $year);
        }
        if (isset($data["monthSecondary"]) && !empty($data["monthSecondary"])) {

            $month = trim($data["monthSecondary"]);
            $query
                ->andwhere('StatGraduateTraining.month = :month')
                ->setParameter('month', $month);
        }
        if (isset($data["organization"]) && !empty($data["organization"])) {
            $organization = strtoupper($data["organization"]);
            $query
                ->andwhere('UPPER(trainingCenter.organisme)= :organisme')
                ->setParameter('organisme', $organization);
        }
        $response = $query->getQuery()->getArrayResult();
        return $response;
    }

    public function getGraduateTrainingByGouvernorat($data, $sector)
    {
        $query = $this->createQueryBuilder('StatGraduateTraining');
        $query->leftJoin('StatGraduateTraining.trainingCenter', 'trainingCenter');
        if (isset($data["gouvernorat"])) {
            $query->leftJoin('trainingCenter.gouvernorat', 'gouvernorat');
            $query
                ->where('gouvernorat.code = :gouvernate')
                ->andWhere("StatGraduateTraining.sectorType = :sector")
                ->setParameter('gouvernate', $data["gouvernorat"])
                ->setParameter('sector', $sector)
                ->orderBy('StatGraduateTraining.updatedAt', "DESC");
        }
        return $query->getQuery()->getResult();
    }

    public function getTotalGraduateTrainingByFiltre($data)
    {
        $query = $this->createQueryBuilder('StatGraduateTraining');
        $query->select('StatGraduateTraining,trainingCenter,levelStudy');
        $query->leftJoin('StatGraduateTraining.trainingCenter', 'trainingCenter');
        $query->leftJoin('StatGraduateTraining.levelStudy', 'levelStudy');
        if (isset($data["governorate"]) && !empty($data["governorate"])) {

            $governorat = trim(intval($data["governorate"]));
            $query->leftJoin('trainingCenter.gouvernorat', 'gouvernorat');
            $query
                ->andwhere('gouvernorat.id = :gouvernate')
                ->setParameter('gouvernate', $governorat);
            //  ->orderBy('StatGraduateTraining.updatedAt', "DESC");
        }
        if (isset($data["delegation"]) && !empty($data["delegation"])) {
            $delegation = trim(intval($data["delegation"]));
            $query->leftJoin('trainingCenter.delegation', 'delegation');
            $query
                ->andwhere('delegation.id = :delegation')
                ->setParameter('delegation', $delegation);
        }
        if (isset($data["sector"]) && !empty($data["sector"])) {
            $type = strtoupper($data["sector"]);
            $query
                ->andwhere('StatGraduateTraining.sectorType = :sector')
                ->setParameter('sector', $type);
            if (isset($data["organization"]) && !empty($data["organization"])) {
                $organization = strtoupper($data["organization"]);
                $query
                    ->andwhere('trainingCenter.organisme = :organisme')
                    ->setParameter('organisme', $organization);
            }

        }
        if (isset($data["year"]) && !empty($data["year"])) {
            $year = trim(intval($data["year"]));
            $query
                ->andwhere('StatGraduateTraining.administrativeYear = :year')
                ->setParameter('year', $year);
        }
        if (isset($data["month"]) && !empty($data["month"])) {
            $month = trim(intval($data["month"]));
            $query
                ->andwhere('StatGraduateTraining.month = :month')
                ->setParameter('month', $month);
        }
        if (isset($data["center"]) && !empty($data["center"])) {
            $center = trim(intval($data["center"]));
            $query
                ->andwhere('trainingCenter.id = :trainingCenter')
                ->setParameter('trainingCenter', $center);
        }
        if (isset($data["registration_number"]) && !empty($data["registration_number"])) {
            $query
                ->andwhere('trainingCenter.numeroEnregistrement = :numeroEnregistrement')
                ->setParameter('numeroEnregistrement', $data["registration_number"]);
        }
        if (isset($data["from"]) && !empty($data["from"]) && isset($data["to"]) && !empty($data["to"])) {
            $du = date("Y-m-d H:i:s", strtotime($data["from"]));
            $au = date("Y-m-d H:i:s", strtotime($data["to"]));

            $query->andWhere("StatGraduateTraining.createdAt > :du")
                ->andWhere("StatGraduateTraining.updatedAt < :au")
                ->setParameter('du', $du)
                ->setParameter('au', $au);
        }
        return $query->getQuery()->getArrayResult();
    }

    public function getGraduateTrainingByFiltre($data)
    {

        $query = $this->createQueryBuilder('StatGraduateTraining');
        $query->select('StatGraduateTraining,trainingCenter,sect,gouvernorat,delegations,levelStudy,sector,subsector,speciality,secteur,sousSecteur
        ,niveauDiplome,natureFormation');
        $query->leftJoin('StatGraduateTraining.trainingCenter', 'trainingCenter');
        $query->leftJoin('trainingCenter.secteur', 'sect');
        $query->leftJoin('trainingCenter.gouvernorat', 'gouvernorat');
        $query->leftJoin('trainingCenter.delegation', 'delegations');
        $query->leftJoin('StatGraduateTraining.levelStudy', 'levelStudy');
        $query->leftJoin('StatGraduateTraining.sector', 'sector');
        $query->leftJoin('StatGraduateTraining.subsector', 'subsector');
        $query->leftJoin('StatGraduateTraining.speciality', 'speciality');
        $query->leftJoin('speciality.secteur', 'secteur');
        $query->leftJoin('speciality.sousSecteur', 'sousSecteur');
        $query->leftJoin('speciality.niveauDiplome', 'niveauDiplome');
        $query->leftJoin('speciality.natureFormation', 'natureFormation');
        if (isset($data["governorate"]) && !empty($data["governorate"])) {

            $governorat = trim($data["governorate"]);
            //  $query->leftJoin('trainingCenter.gouvernorat', 'gouvernorat');
            $query
                ->orWhere('gouvernorat.id = :gouvernate')
                ->orWhere('gouvernorat.code = :gouvernat')
                ->setParameter('gouvernate', $governorat)
                ->setParameter('gouvernat', $governorat);
            //  ->orderBy('StatGraduateTraining.updatedAt', "DESC");

        }
        if (isset($data["delegation"]) && !empty($data["delegation"])) {

            $delegation = trim($data["delegation"]);
            $query
                ->andWhere('delegations.id = :deleg')
                ->setParameter('deleg', $delegation);
        }

        if (isset($data["sector"]) && !empty($data["sector"])) {
            $type = strtoupper($data["sector"]);
            $query
                ->andwhere('StatGraduateTraining.sectorType = :sector')
                ->setParameter('sector', $type);
            if (isset($data["organization"]) && !empty($data["organization"])) {
                $organization = strtoupper($data["organization"]);
                $query
                    ->andwhere('trainingCenter.organisme = :organisme')
                    ->setParameter('organisme', $organization);
            }

        }
        if (isset($data["center"]) && !empty($data["center"])) {
            $center = trim($data["center"]);
            $query
                ->andwhere('trainingCenter.id = :trainingCenter')
                ->setParameter('trainingCenter', $center);
        }
        if (isset($data["registration_number"]) && !empty($data["registration_number"])) {
            $query
                ->andwhere('trainingCenter.numeroEnregistrement = :numeroEnregistrement')
                ->setParameter('numeroEnregistrement', $data["registration_number"]);
        }
        if (isset($data["from"]) && !empty($data["from"]) && isset($data["to"]) && !empty($data["to"])) {
            $du = date("Y-m-d H:i:s", strtotime($data["from"]));
            $au = date("Y-m-d H:i:s", strtotime($data["to"]));
            $query->andWhere('StatGraduateTraining.dateStatGraduateTraining BETWEEN :du AND :au')
                ->setParameter('du', $du)
                ->setParameter('au', $au);
//            $query->orWhere('StatGraduateTraining.createdAt BETWEEN :du AND :au')
//                ->setParameter('du', $du)
//                ->setParameter('au', $au);
        }
        return $query->getQuery()->getArrayResult();
    }


    public function getTotalGraduateTrainingByFiltrePeriode2($data)
    {
        $query = $this->createQueryBuilder('StatGraduateTraining');
        $query->select("trainingCenter.id as idTrainingCenter,levelStudy.level as level, SUM(levelStudy.nbrTrainedF) as nbrTrainedFNational,SUM(levelStudy.nbrTrainedH) as nbrTrainedHnational ,
        SUM(levelStudy.nbrForeigner) as nbrForeignerNational,SUM(levelStudy.nbrAbundant) as nbrAbundantNational,
        SUM(levelStudy.nbrTotal) as nbrTotalNational");
        $query->andWhere("levelStudy.level IS NOT NULL");
        $query->leftJoin('StatGraduateTraining.trainingCenter', 'trainingCenter');
        $query->leftJoin('StatGraduateTraining.levelStudy', 'levelStudy');
        $query->groupBy('trainingCenter,levelStudy.level');
//        if (isset($data["governorate"]) && !empty($data["governorate"])) {
//
//            $governorat = trim($data["governorate"]);
//            $query->leftJoin('trainingCenter.gouvernorat', 'gouvernorat');
//            $query
//                ->andwhere('gouvernorat.id = :gouvernate')
//                ->setParameter('gouvernate', $governorat);
//        }
//        if (isset($data["delegation"]) && !empty($data["delegation"])) {
//            $delegation = trim($data["delegation"]);
//            $query->leftJoin('trainingCenter.delegation', 'delegation');
//            $query
//                ->andwhere('delegation.id = :delegation')
//                ->setParameter('delegation', $delegation);
//        }
        if (isset($data["sector"]) && !empty($data["sector"])) {
            $type = strtoupper($data["sector"]);
            $query
                ->andwhere('StatGraduateTraining.sectorType = :sector')
                ->setParameter('sector', $type);
            if (isset($data["organization"]) && !empty($data["organization"])) {
                $organization = strtoupper($data["organization"]);
                $query
                    ->andwhere('trainingCenter.organisme = :organisme')
                    ->setParameter('organisme', $organization);
            }

        }
        if (isset($data["year"]) && !empty($data["year"])) {
            $year = trim(($data["year"]));
            $query
                ->andwhere('StatGraduateTraining.administrativeYear = :year')
                ->setParameter('year', $year);
        }
        if (isset($data["month"]) && !empty($data["month"])) {
            $month = trim($data["month"]);
            $query
                ->andwhere('StatGraduateTraining.month = :month')
                ->setParameter('month', $month);
        }
        if (isset($data["center"]) && !empty($data["center"])) {
            $center = trim($data["center"]);
            $query
                ->andwhere('trainingCenter.id = :trainingCenter')
                ->setParameter('trainingCenter', $center);
        }
        if (isset($data["registration_number"]) && !empty($data["registration_number"])) {
            $query
                ->andwhere('trainingCenter.numeroEnregistrement = :numeroEnregistrement')
                ->setParameter('numeroEnregistrement', $data["registration_number"]);
        }
        if (isset($data["fromSecondary"]) && !empty($data["fromSecondary"]) && isset($data["toSecondary"]) && !empty($data["toSecondary"])) {
            $du = date("Y-m-d H:i:s", strtotime($data["fromSecondary"]));
            $au = date("Y-m-d H:i:s", strtotime($data["toSecondary"]));

            $query->andWhere('StatGraduateTraining.dateStatGraduateTraining BETWEEN :du AND :au')
                ->setParameter('du', $du)
                ->setParameter('au', $au);

        }

        return $query->getQuery()->getArrayResult();
    }

    public function getGraduateTrainingByFiltrePeriode2($data)
    {
        $query = $this->createQueryBuilder('StatGraduateTraining');
        $query->select('StatGraduateTraining,trainingCenter,sect,gouvernorat,delegation,levelStudy,sector,subsector,speciality,secteur,sousSecteur
        ,niveauDiplome,natureFormation');
        $query->leftJoin('StatGraduateTraining.trainingCenter', 'trainingCenter');
        $query->leftJoin('trainingCenter.secteur', 'sect');
        $query->leftJoin('trainingCenter.gouvernorat', 'gouvernorat');
        $query->leftJoin('trainingCenter.delegation', 'delegation');
        $query->leftJoin('StatGraduateTraining.levelStudy', 'levelStudy');
        $query->leftJoin('StatGraduateTraining.sector', 'sector');
        $query->leftJoin('StatGraduateTraining.subsector', 'subsector');
        $query->leftJoin('StatGraduateTraining.speciality', 'speciality');
        $query->leftJoin('speciality.secteur', 'secteur');
        $query->leftJoin('speciality.sousSecteur', 'sousSecteur');
        $query->leftJoin('speciality.niveauDiplome', 'niveauDiplome');
        $query->leftJoin('speciality.natureFormation', 'natureFormation');
        if (isset($data["governorate"]) && !empty($data["governorate"])) {

            $governorat = trim($data["governorate"]);
            // $query->leftJoin('trainingCenter.gouvernorat', 'gouvernorat');
            $query
                ->orWhere('gouvernorat.id = :gouvernate')
                ->orWhere('gouvernorat.code = :gouvernat')
                ->setParameter('gouvernate', $governorat)
                ->setParameter('gouvernat', $governorat);
            //  ->orderBy('StatGraduateTraining.updatedAt', "DESC");
        }
        if (isset($data["delegation"]) && !empty($data["delegation"])) {
            $delegation = trim($data["delegation"]);
            $query
                ->andwhere('delegation.id = :delegation')
                ->setParameter('delegation', $delegation);
        }
        if (isset($data["sector"]) && !empty($data["sector"])) {
            $type = strtoupper($data["sector"]);
            $query
                ->andwhere('StatGraduateTraining.sectorType = :sector')
                ->setParameter('sector', $type);

            if (isset($data["organization"]) && !empty($data["organization"])) {
                $organization = strtoupper($data["organization"]);
                $query
                    ->andwhere('trainingCenter.organisme = :organisme')
                    ->setParameter('organisme', $organization);
            }

        }
        if (isset($data["center"]) && !empty($data["center"])) {
            $center = trim($data["center"]);
            $query
                ->andwhere('trainingCenter.id = :trainingCenter')
                ->setParameter('trainingCenter', $center);
        }
        if (isset($data["registration_number"]) && !empty($data["registration_number"])) {
            $query
                ->andwhere('trainingCenter.numeroEnregistrement = :numeroEnregistrement')
                ->setParameter('numeroEnregistrement', $data["registration_number"]);
        }
        if (isset($data["fromSecondary"]) && !empty($data["fromSecondary"]) && isset($data["toSecondary"]) && !empty($data["toSecondary"])) {
            $du = date("Y-m-d H:i:s", strtotime($data["fromSecondary"]));
            $au = date("Y-m-d H:i:s", strtotime($data["toSecondary"]));

            $query->andWhere('StatGraduateTraining.dateStatGraduateTraining BETWEEN :du AND :au')
                ->setParameter('du', $du)
                ->setParameter('au', $au);
        }

        return $query->getQuery()->getArrayResult();
    }

    public function getStatGraduateTraining($data)
    {

        $query = $this->createQueryBuilder('StatGraduateTraining');
        $query->leftJoin('StatGraduateTraining.levelStudy', 'levelStudy');
        if (isset($data["sector_type"])) {
            $query->andWhere("StatGraduateTraining.sectorType = :sector_type")
                //$query->expr()->eq('StatGraduateTraining.sectorType', 10);
                ->setParameter('sector_type', $data["sector_type"]);
        }
        if (isset($data["level"])) {
            if ($data["level"] == 0) {
                $query->andWhere('levelStudy.level = :level')
                    ->setParameter('level', $data["level"]);
            } elseif ($data["level"] == 1) {
                $query->andWhere('levelStudy.level = 1');
            }
        }
        return $query->getQuery()->getResult();
    }

    public function getStatFormationPublic($data, $sector)
    {
        //select
        $query = $this->createQueryBuilder('StatGraduateTraining')
            ->select("StatGraduateTraining as graduate  ,trainingCenter.id as IdCenter,trainingCenter.intituleFr as centreFr,trainingCenter.intituleAr as centreAr,
            speciality.intituleFr as specialitFr,trainingCenter.intituleAr as specialitAr,
           levelStudy.nbrTotal as nbEleve, levelStudy.level as level");
        $query->leftJoin('StatGraduateTraining.trainingCenter', 'trainingCenter');
        $query->leftJoin('StatGraduateTraining.speciality', 'speciality');
        $query->leftJoin('StatGraduateTraining.levelStudy', 'levelStudy');
        $query->leftJoin('trainingCenter.gouvernorat', 'gouvernorat');

        $query->where("UPPER(StatGraduateTraining.sectorType) LIKE :sector");
        $query->setParameter('sector', $sector);

        if (isset($data["gouvernorat"]) && !empty($data["gouvernorat"])) {

            $governorat = trim($data["gouvernorat"]);

            $query
                ->andwhere('gouvernorat.code = :gouvernate')
                ->setParameter('gouvernate', $governorat);

        }
        if (isset($data["annee"]) && !empty($data["annee"])) {

            $year = trim($data["annee"]);
            $query
                ->andwhere('StatGraduateTraining.administrativeYear = :year')
                ->setParameter('year', $year);
        }


        $response = $query->getQuery()->getArrayResult();

        return $response;
    }

    public function getStatFormationPrivate($data, $sector)
    {
        //select
        $query = $this->createQueryBuilder('StatGraduateTraining')
            ->select("StatGraduateTraining as graduate  ,trainingCenter.id as IdCenter,trainingCenter.intituleFr as centreFr,trainingCenter.intituleAr as centreAr,
            speciality.intituleFr as specialitFr,trainingCenter.intituleAr as specialitAr,
           levelStudy.nbrTotal as nbEleve, levelStudy.level as level");
        $query->leftJoin('StatGraduateTraining.trainingCenter', 'trainingCenter');
        $query->leftJoin('StatGraduateTraining.speciality', 'speciality');
        $query->leftJoin('StatGraduateTraining.levelStudy', 'levelStudy');
        $query->leftJoin('trainingCenter.gouvernorat', 'gouvernorat');

        $query->where("UPPER(StatGraduateTraining.sectorType) LIKE :sector");
        $query->setParameter('sector', $sector);

        if (isset($data["gouvernorat"]) && !empty($data["gouvernorat"])) {

            $governorat = trim($data["gouvernorat"]);

            $query
                ->andwhere('gouvernorat.code = :gouvernate')
                ->setParameter('gouvernate', $governorat);

        }
        if (isset($data["annee"]) && !empty($data["annee"])) {

            $year = trim($data["annee"]);
            $query
                ->andwhere('StatGraduateTraining.administrativeYear = :year')
                ->andwhere('StatGraduateTraining.approved = :approved')
                ->setParameter('approved', true)
                ->setParameter('year', $year);
        }


        $response = $query->getQuery()->getArrayResult();

        return $response;
    }


}