<?php

namespace Mfpe\UniteRegionaleBundle\Repository;

/**
 * IdentiteRegionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IdentiteRegionRepository extends \Doctrine\ORM\EntityRepository
{

    public function getIdentityRegionByGouvernorat($data)
    {
        $query = $this->createQueryBuilder('IdentiteRegion');
        $query->select("IdentiteRegion,descriptions,cadresRegions,gouvernorate,caracteristiqueRegion");
       // $query1 = $this->createQueryBuilder('IdentiteRegion');
        $query->leftJoin('IdentiteRegion.gouvernorate', 'gouvernorate');
        $query->leftJoin('IdentiteRegion.descriptions', 'descriptions');
        $query->leftJoin('descriptions.caracteristiqueRegion', 'caracteristiqueRegion');
        $query->leftJoin('IdentiteRegion.cadresRegions', 'cadresRegions');

        if (isset($data["governorate"]) && !empty($data["governorate"])) {

            $governorat = trim($data["governorate"]);

            $query
                ->Where('gouvernorate.id = :gouvernate')
                ->orWhere('gouvernorate.code = :gouvernate')
                ->setParameter('gouvernate', $governorat)
                ->orderBy('IdentiteRegion.updatedAt', "DESC");
        }

        return $query->getQuery()->getArrayResult();
    }


    public function findMinicipalityInformation()
    {
        $query = $this->createQueryBuilder('IdentiteRegion');
        $query->select("SUM(IdentiteRegion.nbrMunicipalities) as nbrMunicipalities");
        return $query->getQuery()->getOneOrNullResult();
    }
    public function getIdentityRegionByGouvernoratAnnee($data)
    {
        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');
        $emConfig->addCustomDatetimeFunction('MONTH', 'DoctrineExtensions\Query\Mysql\Month');
        $emConfig->addCustomDatetimeFunction('DAY', 'DoctrineExtensions\Query\Mysql\Day');

        $query = $this->createQueryBuilder('IdentiteRegion');
        $query->select("IdentiteRegion,descriptions,gouvernorate,caracteristiqueRegion,cadresRegions,fonctionCadre");
        // $query1 = $this->createQueryBuilder('IdentiteRegion');
        $query->leftJoin('IdentiteRegion.gouvernorate', 'gouvernorate');
        $query->leftJoin('IdentiteRegion.descriptions', 'descriptions');
        $query->leftJoin('IdentiteRegion.cadresRegions', 'cadresRegions');
        $query->leftJoin('cadresRegions.fonctionCadre', 'fonctionCadre');
        $query->leftJoin('descriptions.caracteristiqueRegion', 'caracteristiqueRegion');

        if (isset($data["gouvernorat"]) && !empty($data["gouvernorat"])) {

            $governorat = trim($data["gouvernorat"]);
            $query
                ->andwhere('gouvernorate.code = :gouvernate')
                ->setParameter('gouvernate', $governorat);
        }
        if (isset($data["annee"]) && !empty($data["annee"])) {
            $query->andWhere('YEAR(IdentiteRegion.createdAt) = :annee')
                ->setParameter('annee', $data["annee"]);
        }

        return $query->getQuery()->getArrayResult();
    }
}
