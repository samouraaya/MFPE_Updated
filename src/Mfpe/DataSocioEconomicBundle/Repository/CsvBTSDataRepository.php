<?php

namespace Mfpe\DataSocioEconomicBundle\Repository;

use Mfpe\ConfigBundle\Repository\AbstractRepository;

/**
 * CsvBTSDataRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CsvBTSDataRepository extends AbstractRepository
{
    public function getCsvBTSDataWithPagination($data)
    {
        $response = array();
        $emConfig = $this->getEntityManager()->getConfiguration();
        $emConfig->addCustomDatetimeFunction('YEAR', 'DoctrineExtensions\Query\Mysql\Year');
        $emConfig->addCustomDatetimeFunction('MONTH', 'DoctrineExtensions\Query\Mysql\Month');
        $emConfig->addCustomDatetimeFunction('DAY', 'DoctrineExtensions\Query\Mysql\Day');
//Total
        $query = $this->createQueryBuilder('CsvBTSData')
            ->select("SUM(CsvBTSData.nbCred) as NbCred", "SUM(CsvBTSData.mtCred) as mtCred", "SUM(CsvBTSData.coutTotalInvs) as coutTotalInvs", "SUM(CsvBTSData.nbEmploiCreer) as nbEmploiCreer");
        $total = $query->getQuery()->getOneOrNullResult();
        //Search pear page
        $query = $this->createQueryBuilder('CsvBTSData');
        $query->select("CsvBTSData,gouvernorat");
        $query->leftJoin('CsvBTSData.governoratId', 'gouvernorat');
        if (isset($data["gouvernorat"])) {

            $query
                ->andWhere('gouvernorat.id = :gouvernorat')
                ->setParameter('gouvernorat', $data["gouvernorat"]);
        }

        if (isset($data["annee"]) && !empty($data["annee"])) {
            $query->andWhere('YEAR(CsvBTSData.createdAt) = :annee')
                ->setParameter('annee', $data["annee"]);
        }
        if (isset($data["secteur"]) && !empty($data["secteur"])) {
            $secteur = strtoupper($data["secteur"]);
            $query->andWhere('CsvBTSData.typeFile = :typeFile')
                ->andWhere('CsvBTSData.libelle LIKE :secteur')
                ->setParameter('secteur', "%{$secteur}%")
                ->setParameter('typeFile', 5);
        }
        if (isset($data["niveau"]) && !empty($data["niveau"])) {
            $niveau = strtoupper($data["niveau"]);
            $query->andWhere('CsvBTSData.typeFile = :typeFile')
                ->andWhere('CsvBTSData.libelle LIKE :niveau')
                ->setParameter('niveau', "%{$niveau}%")
                ->setParameter('typeFile', 4);
        }
        if (isset($data["genre"]) && !empty($data["genre"])) {
            $genre = strtoupper($data["genre"]);
            $query->andWhere('CsvBTSData.typeFile = :typeFile')
                ->andWhere('CsvBTSData.libelle LIKE :genre')
                ->setParameter('genre', "%{$genre}%")
                ->setParameter('typeFile', 3);
        }
        if (isset($data["nature_projet"]) && !empty($data["nature_projet"])) {
            $nature_projet = strtoupper($data["nature_projet"]);
            $query->andWhere('CsvBTSData.typeFile = :typeFile')
                ->andWhere('CsvBTSData.libelle LIKE :nature')
                ->setParameter('nature', "%{$nature_projet}%")
                ->setParameter('typeFile', 2);
        }

        $response["btsData"] = $query->getQuery()->getArrayResult();
        $response["total"] = $total;
        //return result
        return $response;
    }

}
